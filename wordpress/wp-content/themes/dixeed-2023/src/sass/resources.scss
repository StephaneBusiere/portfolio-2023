/*--------------------------------------------------------------
# SASS Variables and Mixins. Do not output any css in here. if you need these make sure to @use "variables"
--------------------------------------------------------------*/
//css vars cannot be used in media queries. Sass is still used for media query variables
//Add your own query variables below

/*------- Media Query Sizes. Add your own --------*/
$media-nav: 800px; //when navigations should go mobile. Should prob match --nav-move found in variables.scss
$media-sidebar: 1000px; //when .secondary would go mobile if you are using it.
$media-small: 576px;
$media-medium: 768px;
$media-large: 1030px;
$media-container: 1200px; //should match the container css variable


$gap: 30px; //still used in some queries and instances
$collapse-on-small: true; //collapse grid and flex-grid and flex on small devices automatically. small-span can override

/*------- Panel Becomes Absolute Query  --------*/
$panel-left-absolute: 500px; //when panel-left should become absolute instead of pushing main content over
$panel-right-absolute: 1030px;


/*------- Add your own breakpoints to the grid --------*/
//When using the grid you have the ability to makes spans at that breakpoint.
//ie: medium-span-4 will span 4 at the $media-medium size
//add your own to the list below to have your own span classes available!
//you will need a name to use in the class and you need to create a media variable set to a pixel size
$media-list: ('container': $media-container, 'medium': $media-medium, 'small': $media-small, 'large': $media-large);






/*--------------------------------------------------------------
Mixins
--------------------------------------------------------------*/

/*------- Retina --------*/
@mixin retina {
  @media screen and (-webkit-min-device-pixel-ratio: 2),
  screen and (min-resolution: 192dpi),
  screen and (min-resolution: 2dppx) {
    @content;
  }
}


// Replace letters
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Encode symbols
@function url-encode($string) {
  $map: (
          "%": "%25",
          "<": "%3C",
          ">": "%3E",
          " ": "%20",
          "!": "%21",
          "*": "%2A",
          "'": "%27",
          '"': "%22",
          "(": "%28",
          ")": "%29",
          ";": "%3B",
          ":": "%3A",
          "@": "%40",
          "&": "%26",
          "=": "%3D",
          "+": "%2B",
          "$": "%24",
          ",": "%2C",
          "/": "%2F",
          "?": "%3F",
          "#": "%23",
          "[": "%5B",
          "]": "%5D"
  );

  $new: $string;

  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }

  @return $new;
}

// Format the SVG as a URL
@function inline-svg($string) {
  @return url('data:image/svg+xml,#{url-encode($string)}');
}



/*------- Deep Shadow Mixin --------*/
/// @param {Color} $color - color to tint
/// @param {Size} $number - how many times to do the shadow
@mixin deep-shadow($color, $size) {
  //add layers of text shadow to $text-shadow
  $text-shadow: '1px 1px #{$color}';
  $comma: ',';

  @for $i from 2 through $size {
    $text-shadow: #{$text-shadow} #{$comma} #{$i}px #{$i}px 0 $color;
  }

  text-shadow: $text-shadow;
}

/*------- Lighten and shade colors --------*/
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/*------- Fluid Font Lock --------*/
// Fluid Font (CSS Lock) from https://github.com/alexerlandsson/scss-font-lock
@function sfl-strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin scss-font-lock($min-size, $max-size, $min-width: 400px, $max-width: 1000px, $base-font-size: 16px) {
  $error: false;

  /* Add variables to a map */
  $var-list: (min-size: $min-size, max-size: $max-size, min-width: $min-width, max-width: $max-width);

  /* Control unit of passed variables */
  @each $key, $val in $var-list {
    @if (unit($val) != px) and (unit($val) != em) {
      @warn "`#{$key}` needs to be set in px or em.";
      $error: true;
    } @else if (unit($val) == em) {
      /* Set max-size in px if set in em */
      $val: (sfl-strip-unit($val) * $base-font-size);
      $var-list: map-merge($var-list, ($key: $val));
    }
  }

  /* Set the new values to the variables */
  $min-size: map-get($var-list, min-size);
  $max-size: map-get($var-list, max-size);
  $min-width: map-get($var-list, min-width);
  $max-width: map-get($var-list, max-width);

  @if ($error == false) {
    font-size: $min-size;
    @media (min-width: $min-width) and (max-width: $max-width) {
      $size-increase: (sfl-strip-unit($max-size) - sfl-strip-unit($min-size));
      font-size: calc(#{$min-size} + #{$size-increase} * (100vw - #{$min-width}) / (#{sfl-strip-unit($max-width)} - #{sfl-strip-unit($min-width)}));
    }
    @media (min-width: ($max-width + 1px)) {
      font-size: $max-size;
    }
  } @else {
    @warn "There is an error in `@include scss-font-lock();`";
    /* Print error message on page */
    &:before {
      content: "There is an error in @include scss-font-lock();";
      position: absolute;
      padding: 10px 15px;
      white-space: nowrap;
      background-color: red;
      border-radius: 10px;
      color: white;
      top: 50%;
      left: 50%;
      -webkit-transform: translate(-50%, -50%);
      -moz-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
    }
  }

}

/*------- Sort Map by values --------*/
@function map-sort-by-values($map, $reverse: false) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: append($keys, $key);
    $values: append($values, $val);
  }

  $list: zip($keys, $values); //will become one list 'container', $media-container...

  $sortedMap: ();
  @while length($list) > 0 {

    // Find largest pair. compare all pairs and save the smallest one each time. (or largest if wanted...)
    //then we save that pair to a new map and remove it from old list. go over list again and again...
    $smallestPair: nth($list, 1);
    @each $pair in $list {
      $value: nth($pair, 2); //for each pair get the value
      $smallestValue: nth($smallestPair, 2); //last small pair saved

      @if $reverse{
        @if $value > $smallestValue { //change to largest or smallest > <
          $smallestPair: $pair; //set current pair as smallest
        }
      }
      @else{
        @if $value < $smallestValue { //change to largest or smallest > <
          $smallestPair: $pair; //set current pair as smallest
        }
      }

    }

    // Add smallest pair to sorted map
    $key: nth($smallestPair, 1);
    $value: nth($smallestPair, 2);
    $sortedMap: map-merge($sortedMap, ($key: $value));

    // Remove from list smallest pair
    $smallestPairIndex: index($list, $smallestPair);
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $smallestPairIndex {
        $newList: append($newList, nth($list, $i), "space");
      }
    }
    $list: $newList;
  }

  @return $sortedMap;
}


/*------- Grid --------*/
//perfect grid of responsive items
@mixin card-grid($auto-type: auto-fit, $min: 350px, $grid-gap: 30px, $max: 1fr) {
  display: grid;
  --card-min: 250px;
  --card-max: #{$max};
  --card-type: #{$auto-type};
  grid-template-columns: repeat(var(--card-type), minmax( min( var(--card-min), 100%), var(--card-max)));
  grid-gap: var(--grid-gap);

  justify-content: center;

  //fallback for ie11
  @media all and (-ms-high-contrast: none) {
    display: flex;
    flex-wrap: wrap;
    & > * {
      flex-grow: 1;
      flex-shrink: 1;
      flex-basis: 0;
      min-width: calc(#{$min - $grid-gap});
      margin: $grid-gap / 2;
      margin-top: 0;
      margin-bottom: $grid-gap;
    }

    &.no-gutters {
      margin-left: 0;
      margin-right: 0;
    }

    &.no-gutters > * {
      margin: 0;
    }

    .conainer &, .container-fluid &, .container-content & {
      margin-left: calc(-1 * var(--gap));
      margin-right: calc(-1 * var(--gap));

      &.no-gutters {
        margin-left: 0;
        margin-right: 0;
      }
    }
  }
}


@mixin flex-card-grid($min: 350px, $grow: 1, $shrink: 1, $grid-gap: 30px) {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  $grid-gutter: $grid-gap/2;
  margin-left: -#{$grid-gutter};
  margin-right: -#{$grid-gutter};

  > * {
    flex-grow: $grow;
    flex-shrink: $shrink;
    flex-basis: calc(#{$min - $grid-gap}); //using calc we can even allow % based widths
    margin: 0 $grid-gutter $grid-gap $grid-gutter;
  }

  &.no-gutters {
    margin-left: 0;
    margin-right: 0;
  }

  &.no-gutters > * {
    margin: 0;
  }

  @media screen and (-ms-high-contrast:active), (-ms-high-contrast: none) {
    > * {
      flex-basis: auto;
      min-width: calc(#{$min - $grid-gap}); //using calc we can even allow % based widths
    }
  }
}
